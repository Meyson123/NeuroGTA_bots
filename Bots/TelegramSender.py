import os
import requests
import json
from dotenv import load_dotenv

load_dotenv()

TG_API_TOKEN = os.getenv('TOKENTG')
TELEGRAM_CHAT_ID = 709479935
TG_API_URL = f'https://api.telegram.org/bot{TG_API_TOKEN}/sendMessage'

async def sending_to_tg(payload=None, text=None):
    if payload == None:
        payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': text,
    }
    try:
        response = requests.post(TG_API_URL, data=payload)
        if response.status_code == 200:
            print(f'Telegram sender: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
        else:
            print(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {response.status_code}')
    except requests.exceptions.RequestException as e:
        print(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {e}')


async def send_topic_to_telegram(topic, style, requestor_name, requestor_id, source, priority, topic_id, can_ban_user):
    message = f'''
–¢–µ–º–∞: {topic}
–°—Ç–∏–ª—å: {style}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}'''

    if can_ban_user:
        inline_keyboard = [
            [{"text": "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "callback_data": f"del|&|{requestor_id}|&|{topic_id}"}],
            [{"text": "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É + –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "callback_data": f"delpred|&|{requestor_id}|&|{topic_id}"}],
            [{"text": "üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"ban|&|{requestor_id}|&|{topic_id}"}],
            [{'text': '‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',"callback_data": f'up|&|{requestor_id}|&|{topic_id}'}]
        ]
    else:
        inline_keyboard = [
            [{"text": "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "callback_data": f"del|&|{requestor_id}|&|{topic_id}"}],
        ]
    reply_markup = {"inline_keyboard": inline_keyboard}

    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'reply_markup': json.dumps(reply_markup)
    }
    await sending_to_tg(payload)


async def send_similar_error(topic,requestor_name,requestor_id,source,orig,procent):
    message = f'''
–¢–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–¢–µ–º–∞: {topic}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞: {orig}
–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞: {procent}%'''
    inline_keyboard = [
        [{"text": "üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"ban|&|{requestor_id}"}]
    ]
    reply_markup = {"inline_keyboard": inline_keyboard}

    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'reply_markup': json.dumps(reply_markup)
    }
    await sending_to_tg(payload)


async def send_filter_error(topic,requestor_name,requestor_id,source,warnings, can_ban_user):
    message =  f'''
–¢–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–¢–µ–º–∞: {topic}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}'''
    inline_keyboard = [
     [{"text": "üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"ban|&|{requestor_id}"}]
    ]
    reply_markup = {"inline_keyboard": inline_keyboard}

    if can_ban_user:
        payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'reply_markup': json.dumps(reply_markup)
        }
    else:
        payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        }
    await sending_to_tg(payload)

async def send_len_error(topic,requestor_name,requestor_id,source, can_ban_user):
    message = f'''
–¢–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–¢–µ–º–∞: {topic}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–î–ª–∏–Ω–∞ —Ç–µ–º—ã: {len(topic)}'''
    inline_keyboard = [
     [{"text": "üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"ban|&|{requestor_id}"}]
    ]
    reply_markup = {"inline_keyboard": inline_keyboard}
    if can_ban_user:
        payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'reply_markup': json.dumps(reply_markup)
        }
    else:
        payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        }
    await sending_to_tg(payload)
async def send_donated(info):
    message =  f'''
ü§ëü§ëü§ë–î–û–ù–ê–¢ü§ëü§ëü§ë
{info}
'''

    payload = {
    'chat_id': TELEGRAM_CHAT_ID,
    'text': message,
    }
    await sending_to_tg(payload)
