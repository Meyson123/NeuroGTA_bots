import asyncio
import os
import sys
import time
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from dotenv import load_dotenv
from telebot.async_telebot import AsyncTeleBot, types
from telebot.types import InlineKeyboardMarkup,InlineKeyboardButton
from Bots.TelegramTexts import start_sms, subs_sms, help_sms, cover_sms, intro_sms, rules_sms, donate_sms
from myConfig import AdminTgIds, ChanelToSubscribeID, NeedTopicDelay, TopicDelayTg, TopicPriority, \
    default_topic_suggest_message,threshold, MaxLengthTG, DonatedTopicSumRub, SubsChatsIDs, DonateUrl, \
    SubsUpTopicCount, SubsUpTopicDelay, UrlPlatinum, UrlLegendary, valid_speakers, replacements
from Mongodb.CountScripts import warnings_by_user,add_count, sort_counter,add_warning,block_user,search_nick
from Mongodb.BotsScripts import add_topic,connect_to_mongodb,filt,delete_theme,search_number,\
    get_topic_by_user,check_topic_exists, check_topic_style, get_members_id, edit_topic,\
    up_theme, add_interaction, get_parameters_by_topic_id,get_id_by_theme_number, add_mashup, replace_name
from quart import Quart, request

load_dotenv()
bot = AsyncTeleBot(os.getenv('TOKENTG'))
mode = 'on'
last_topic_time = {}
subs_data = {}
# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ mongodb
db = connect_to_mongodb()
source = 'Telegram'

users_good = 0
users_bad = 0

user_responses = {}
last_id = ''

#region –°–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
app = Quart(__name__)
@app.route('/telegram-webhook', methods=['POST'])
async def telegram_webhook():
    data = await request.json
    action = data.get('action')
    match action:
        case "CheckQueue":
            if (id_3 := await get_id_by_theme_number(db, 2)):
                if await check_for_admin(SubsChatsIDs[0], id_3) or await check_for_admin(SubsChatsIDs[1], id_3): 
                    await send_notification(id_3, 3)
            if (id_1 := await get_id_by_theme_number(db, 0)):
                if await check_for_admin(SubsChatsIDs[0], id_1) or await check_for_admin(SubsChatsIDs[1], id_1):
                    await send_notification(id_1, 1)
            #print(text, notification_id)
            return {'status': 'success'}
        case "MashupError":
            await bot.send_message(AdminTgIds[1], "‚ùóÔ∏è–û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ú–≠–®–ê–ü–ê‚ùóÔ∏è")
            return {'status': 'success'}
        case "TopicError":
            await bot.send_message(AdminTgIds[1], "‚ùóÔ∏è–û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –¢–ï–ú–´‚ùóÔ∏è")
            return {'status': 'success'}
        case "Waiting":
            text = data.get('text')
            full_text = "\n\n".join(f"{line['character']}: {line['dialogue']}" for line in text)
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
            InlineKeyboardButton("–ó–∞–µ–±–∏—Å—åüëç", callback_data='good'),
            InlineKeyboardButton("–•—É–µ–≤–æüëé", callback_data='bad'))
            keyboard.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É/—Å—Ç–∏–ª—åüîÑ", callback_data='edit'))

            message = await bot.send_message(AdminTgIds[2], full_text, reply_markup=keyboard)
            user_responses[message.message_id] = None
            while user_responses[message.message_id] not in ["good", "bad"]:
                await asyncio.sleep(1)
            if user_responses[message.message_id] == 'good':
                return {'status': 'success'}
            else:
                return {'status': 'failed'}, 400
            
    return {'status': 'failed'}, 400
#endregion

#region –î–æ–ø –§—É–Ω–∫—Ü–∏–∏
async def check_for_admin(chat_id, admin_id):
    try:
        admins = await bot.get_chat_administrators(chat_id)
        for admin in admins:
            if str(admin.user.id) == str(admin_id):
                return True
        return False
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return False
    
async def check_for_sub(id):
    chat_member = await bot.get_chat_member(ChanelToSubscribeID, id)
    return chat_member.status in ['member', 'administrator', 'creator']

async def send_notification(admin_id, position):
    try:
        if position == 1:
            text = 'üîî–¢–≤–æ—è —Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! [(–°–¢–†–ò–ú –¢–£–¢)](https://www.tiktok.com/@neurogta/live)'
        else:
            text = '‚è∞–¢–≤–æ—è —Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤ —ç—Ñ–∏—Ä–µ! –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: 3'
        await bot.send_message(admin_id, text, parse_mode='Markdown')
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

async def send_message_to_user(user_id, message):
    global users_bad, users_good
    try:
        await bot.send_message(user_id, message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
        users_good += 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")
        users_bad += 1

#endregion

#region –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã

@bot.message_handler(commands=['start'])
async def start(message):
    if await check_for_sub(message.from_user.id) == False:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="‚úÖ–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"sub|&|{message.from_user.id}"))
            await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –±—Ä–æ! \n\n"
                                   "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ù–µ–π—Ä–æ GTA! \n\n"
                                   "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞\n"
                                                    f"–ù–µ–π—Ä–æ GTA {ChanelToSubscribeID}", reply_markup=keyboard)
            return
    await bot.send_message(message.chat.id, start_sms)

@bot.message_handler(commands=['help'])
async def help_message(message):
    await bot.send_message(message.chat.id, help_sms)

@bot.message_handler(commands=['topic'])
async def topic(message):
    try:
        if await check_for_sub(message.from_user.id) == False:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="‚úÖ–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"sub|&|{message.from_user.id}"))
            await bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ —Å—Ç—Ä–∏–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞\n"
                                                    f"–ù–µ–π—Ä–æ GTA {ChanelToSubscribeID}", reply_markup=keyboard)
            return
    except Exception as e:
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


    topic = message.text[7:]
    requestor_name = message.from_user.first_name
    requestor_id = message.from_user.id
    user_tag = f'@{message.from_user.username}'
    warnings = await warnings_by_user(requestor_name, source, requestor_id)
    if mode == 'off':
        if not (await check_for_admin(SubsChatsIDs[0], requestor_id) or await check_for_admin(SubsChatsIDs[1], requestor_id)):
            await send_off_mode_text(message)
            return
    if warnings == 5:
        await block_user(requestor_name,requestor_id,user_tag,requestor_id)
    if await search_nick(requestor_name,'BlackList',source,requestor_id):
        await bot.send_message(message.chat.id,'–°–æ–∂–∞–ª–µ–µ–º,–Ω–æ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–º–æ–ª–∏—Ç—å –ø—Ä–æ—â–µ–Ω–∏–µ —É @Meyson420')
        return
    if topic == '' or topic == 'NeuroGta_bot':
        await bot.send_message(message.chat.id, '–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–º—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /topic')
        return
    if await filt(topic):
        await add_warning(requestor_name,source,requestor_id)
        last_topic_time[requestor_id] = time.time()
        if warnings is None:
            warnings = 0
        await bot.send_message(message.chat.id, '–ê–π-–∞–π-–∞–π,—É –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ù–µ –Ω—É–∂–Ω–æ –∫–∏–¥–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã\n/rules - –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã')
        await bot.send_message(message.chat.id,f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å {warnings+1} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.')
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data= f"ban|&|{requestor_id}"))
        await bot.send_message(-1002175092872, f'''
–¢–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–¢–µ–º–∞: {topic}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–¢–µ–≥: {user_tag}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings+1}''',reply_markup=markup)
        return

    topic, style_content = await check_topic_style(topic)

    check_result = await check_topic_exists(db, topic, threshold)
    if len(topic) > MaxLengthTG:
        if not(message.chat.id in AdminTgIds):
            await bot.send_message(message.chat.id,f'–¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è.\n–¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ {MaxLengthTG} —Å–∏–º–≤–æ–ª–æ–≤')
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton('üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data= f"ban|&|{requestor_id}"))
            await bot.send_message(-1002175092872, f'''
–¢–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–¢–µ–º–∞: {topic}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–¢–µ–≥: {user_tag}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–î–ª–∏–Ω–∞ —Ç–µ–º—ã: {len(topic)}''',reply_markup=markup)
            return
    if check_result[0]:
         procent, orig = check_result[1],check_result[2]
         await bot.send_message(message.chat.id, '–¢–µ–º–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–¢–∞–∫–∞—è —Ç–µ–º–∞(–∏–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è –µ–π) —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏.\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ')
         await bot.send_message(-1002175092872, f'''
–¢–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–¢–µ–º–∞: {topic}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–¢–µ–≥: {user_tag}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞: {orig}
–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞: {procent}%''')
         return
    if not (message.chat.id in AdminTgIds):
        if NeedTopicDelay:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –ø—Ä–æ—à–ª–æ –ª–∏ 2 –º–∏–Ω—É—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
            if message.chat.id in last_topic_time and time.time() - last_topic_time[message.chat.id] < TopicDelayTg:
                minuta = "–º–∏–Ω—É—Ç—É" if TopicDelayTg / 60 == 1 else (
                    "–º–∏–Ω—É—Ç—ã" if 2 <= TopicDelayTg / 60 <= 4 else "–º–∏–Ω—É—Ç")
                await bot.reply_to(message,
                                   f"–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ {int(TopicDelayTg / 60)} {minuta}.")
                return


    topic_id = await add_topic(db, requestor_name, user_tag, requestor_id, source, TopicPriority, topic, style_content)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É', callback_data=f"del|&|{requestor_id}|&|{topic_id}"))
    markup.add(InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É + –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', callback_data=f"delpred|&|{requestor_id}|&|{topic_id}"))
    markup.add(InlineKeyboardButton('üñï –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data= f"ban|&|{requestor_id}|&|{topic_id}"))
    markup.add(InlineKeyboardButton('‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',callback_data= f'up|&|{requestor_id}|&|{topic_id}'))
    await bot.send_message(-1002175092872, f'''
–¢–µ–º–∞: {topic}
–°—Ç–∏–ª—å: {style_content}
–ù–∏–∫ –∞–≤—Ç–æ—Ä–∞: {requestor_name}
–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requestor_id}
–¢–µ–≥: {user_tag}
–ò—Å—Ç–æ—á–Ω–∏–∫: {source}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {TopicPriority}''',reply_markup=markup)
    markup2 = InlineKeyboardMarkup()
    markup2.add(InlineKeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–º—É –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏',callback_data= f'up-user|&|{requestor_id}|&|{topic_id}'))
    markup2.add(InlineKeyboardButton('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ–º—ã',callback_data= f'notice|&|{requestor_id}|&|{topic_id}'))
    await bot.reply_to(message, text=default_topic_suggest_message + f'\n–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {await search_number(topic_id,db)}\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/queue',reply_markup = markup2)
    await add_count(requestor_name, source, str(requestor_id))
    await sort_counter()
    #await bot.send_message(message.chat.id,'–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,–∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è —Ç–≤–æ–µ–π —Ç–µ–º—ã? \n‚û°Ô∏èÔ∏è –ü–∏—à–∏ /subscribe')
    last_topic_time[requestor_id] = time.time()

@bot.message_handler(commands=['rules'])
async def rules(message):
    await bot.send_message(message.chat.id, rules_sms)

@bot.message_handler(commands=['queue'])
async def queue(message):
    user_id = message.from_user.id
    k = 1
    spisok = ''
    for topics in await get_topic_by_user(user_id,db):
        number = await search_number(topics['_id'],db)
        topic = topics['topic']
        spisok = spisok + f'{k}) {topic} - {number} –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏\n'
        k += 1
    if spisok == '':
        spisok = '–ü–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏.'
    await bot.send_message(message.chat.id,f'{spisok}\n\nP.S. –ï—Å–ª–∏ –¥–æ —Ç–≤–æ–µ–π —Ç–µ–º—ã –¥–∞–ª–µ–∫–æ - –∑–∞ {DonatedTopicSumRub}‚ÇΩ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏!\n{DonateUrl} üíñ\n\nP.P.S –ê —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–≤–æ–µ–π —Ç–µ–º—ã –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ–º—ã –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ - –Ω–∞–ø–∏—à–∏ /subscribe üòç')
    #await bot.send_message(message.chat.id,spisok)

@bot.message_handler(commands=['subscribe'])
async def subscribe(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="üíéPLATINUMüíé", url=UrlPlatinum))
    markup.add(InlineKeyboardButton(text="üëëLEGENDARYüëë", url=UrlLegendary))
    #await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=markup)
    await bot.send_message(message.chat.id, subs_sms, parse_mode="Markdown", reply_markup=markup)
                       
@bot.callback_query_handler(func=lambda call: True)
async def callbacks(call):
    if call.data in ["good", "bad", "edit"]:
        user_responses[call.message.message_id] = call.data
        match call.data:
            case 'bad':
                await bot.delete_message(call.message.chat.id, call.message.message_id)
            case 'good':
                await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            case 'edit':
                await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ç–µ–º—É –∏/–∏–ª–∏ —Å—Ç–∏–ª—å")
                global mode, last_id
                mode = 'edit'
                last_id = call.message.message_id
        return
                
    calldata = call.data.split('|&|')
    but = calldata[0]
    user_id = calldata[1]

    if but == "sub":
        if await check_for_sub(user_id) == False:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton(text="‚úÖ–¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"sub|&|{user_id}"))
                    await bot.send_message(user_id, "–û—à–∏–±–∫–∞, —Ç—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º Telegram-–∫–∞–Ω–∞–ª–∞\n"
                                                    f"–ù–µ–π—Ä–æ GTA {ChanelToSubscribeID}", reply_markup=keyboard)
        else:
            await bot.send_message(user_id, intro_sms, parse_mode='Markdown')
        return
    
    elif but == 'ban':
        chat_info = await bot.get_chat(user_id)
        user_tag = f'@{chat_info.username}' 
        user_name = chat_info.first_name
        global source
        await block_user(source,user_name,user_tag,user_id)
        await bot.reply_to(call.message,'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ï–±–∞—Ç—å –æ–Ω –ª–æ—Ö')
        await bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª! :)')
        return

    topic_id = calldata[2]
    topic, user_name, user_tag, source = await get_parameters_by_topic_id(db, topic_id, 'topic', 'requestor_name', 'user_tag', 'source')
    print(user_name, user_tag, source)
    if but == 'del':
        await delete_theme(db,topic_id)
        await bot.reply_to(call.message,'–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞')
        await bot.send_message(user_id, f'–í–∞—à–∞ —Ç–µ–º–∞ "{topic}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.')
    elif but == 'delpred':
        try:
            await delete_theme(db,topic_id)
        except:
            await bot.reply_to(call.message,'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã')
        await add_warning(user_name,source,user_id)
        warns = await warnings_by_user(user_name, source, user_id)
        await bot.reply_to(call.message,'–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞, +1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
        await bot.send_message(user_id, f'–í–∞—à–∞ —Ç–µ–º–∞ "{topic}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warns}/5')
    elif but == 'up':
        await up_theme(db,topic_id)
        await bot.reply_to(call.message,'–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ–º—ã –ø–æ–≤—ã—à–µ–Ω.')
    elif but == 'up-user':
        if await check_for_admin(SubsChatsIDs[1], user_id):
            if user_id in subs_data:
                if time.time() - subs_data[user_id]['last_time'] < SubsUpTopicDelay:
                    await bot.send_message(user_id, f'‚è∞–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º—É –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ {int(SubsUpTopicDelay/60)} –º–∏–Ω—É—Ç.')
                elif subs_data[user_id]['count'] >= SubsUpTopicCount:
                    await bot.send_message(user_id, f'üòî–õ–∏–º–∏—Ç —Ç–µ–º –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —ç—Ç–æ–º —Å—Ç—Ä–∏–º–µ –∏—Å—á–µ—Ä–ø–∞–Ω. –ö–∞–∂–¥—ã–π —Å—Ç—Ä–∏–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ —Ç–µ–º –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏: {SubsUpTopicCount}')
                else:
                    subs_data[user_id]['count']+=1
                    subs_data[user_id]['last_time'] = time.time()
                    await up_theme(db,topic_id)
                    await bot.send_message(user_id, f'üöÄ–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏!')
            else:
                subs_data[user_id] = {'last_time': time.time(), 'count': 1}
                await up_theme(db,topic_id)
                await bot.send_message(user_id, f'üöÄ–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏!')
        else:
            await bot.send_message(user_id, 'üîí–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É—Ä–æ–≤–Ω—è *"LEGENDARY"*\n–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /subscribe', parse_mode="Markdown")
        pass
    elif but == 'notice':
        if await check_for_admin(SubsChatsIDs[1], user_id) or await check_for_admin(SubsChatsIDs[0], user_id):
            await bot.send_message(user_id, f'‚úÖ–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
        else:
           await bot.send_message(user_id, 'üîí–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É—Ä–æ–≤–Ω—è *"PLATINUM"* –∏ *"LEGENDARY"*\n–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /subscribe', parse_mode="Markdown") 
        pass


@bot.message_handler(commands=['donate'])
async def donate(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚ù§Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç‚ù§Ô∏è", url=f"{DonateUrl}"))
    await bot.send_message(message.chat.id, donate_sms, parse_mode='Markdown', reply_markup=keyboard)
    
@bot.message_handler(commands=['cover'])
async def cover(message):
     await bot.send_message(message.chat.id, cover_sms, parse_mode='Markdown')

#endregion


#region –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['spam'])
async def spam(message):
    if not(message.chat.id in AdminTgIds):
        return
    text = message.text[6:]
    await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç—Ä–∏–º!')
    try:
        all_id = await get_members_id(db)
        for user_id in all_id:
            await send_message_to_user(user_id, text)
    except Exception as e:
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    await bot.send_message(message.chat.id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {users_good}. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {users_bad}.')

@bot.message_handler(commands=['spam_forwarded'])
async def spam(message):
    if not(message.chat.id in AdminTgIds):
        return
    global mode
    mode = "spam"
    await bot.send_message(message.chat.id, "‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!‚ùóÔ∏è")

@bot.message_handler(commands=['action'])
async def add_action(message):
    if not(message.chat.id in AdminTgIds):
        return
    action_parameter = message.text[8:].strip()
    if ' ' in action_parameter:
        action, parameter = action_parameter.split(' ', 1)
    else:
        action = action_parameter
        parameter = "" 
    await add_interaction(db, action, parameter)
    await bot.send_message(message.chat.id, f"–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É")

@bot.message_handler(commands=['skip'])
async def skip(message):
    if not(message.chat.id in AdminTgIds):
        return
    await add_interaction(db, "skip", "")
    await bot.send_message(message.chat.id, f"–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∏–ø–Ω—É—Ç–∞")

@bot.message_handler(commands=['save'])
async def save(message):
    if not(message.chat.id in AdminTgIds):
        return
    await add_interaction(db, "save", "")
    await bot.send_message(message.chat.id, f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

@bot.message_handler(commands='off')
async def off(message):
    if not(message.chat.id in AdminTgIds):
        return
    global mode
    mode = 'off'
    await bot.send_message(message.chat.id, "–ü—Ä–∏—ë–º —Ç–µ–º –∑–∞–∫—Ä—ã—Ç")

@bot.message_handler(commands='on')
async def on(message):
    if not(message.chat.id in AdminTgIds):
        return
    global mode
    mode = 'on'
    await bot.send_message(message.chat.id, "–ü—Ä–∏—ë–º —Ç–µ–º –æ—Ç–∫—Ä—ã—Ç")

@bot.message_handler(commands='delay')
async def delay(message):
    global TopicDelayTg
    if not(message.chat.id in AdminTgIds):
        return
    if message.text[7:] == "":
        await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–µ–µ –∫–¥: {TopicDelayTg} —Å–µ–∫—É–Ω–¥. ({TopicDelayTg/60} –º–∏–Ω—É—Ç)") 
    else:
        TopicDelayTg = int(message.text[7:])
        await bot.send_message(message.chat.id, f"–ù–æ–≤–æ–µ –∫–¥: {TopicDelayTg} —Å–µ–∫—É–Ω–¥. ({TopicDelayTg/60} –º–∏–Ω—É—Ç)")   

@bot.message_handler(commands='edit')
async def edit(message):
    if not(message.chat.id in AdminTgIds):
        return
    await try_edit_topic(message.chat.id, message.text[6:])

@bot.message_handler(commands='meyson')
async def meyson(message):

    mashup = message.text.split("/meyson ", 1)[1]
    requestor = message.from_user.first_name

    if mashup and " " in mashup:
        speaker, url = mashup.split(" ", 1)
        if speaker.upper() in valid_speakers:
            eng_speaker = replace_name(speaker, replacements)
            await add_mashup(db, requestor, message.from_user.id, source, 1, eng_speaker, url)
            await bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏–ª–∏ –∫–∞–≤–µ—Ä")

#endregion    
  
@bot.message_handler(content_types=['text', 'photo', 'sticker', 'document', 'audio', 'video', 'voice'])
async def send_text(message):
    global mode, last_id
    
    if message.chat.id in AdminTgIds:
        if mode == 'edit':
            await try_edit_topic(message.chat.id, message.text)
            user_responses[last_id] = "bad"
            mode = "on"
        if mode == 'spam':
            mode = 'on'
            try:
                all_id = await get_members_id(db)
                for user_id in all_id:
                    try:
                        await bot.copy_message(user_id, message.chat.id, message.id)
                        print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É {user_id}')
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —é–∑–µ—Ä—É {user_id} {e}")
            except Exception as e:
                await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    
    if not(message.chat.id in AdminTgIds) and not(message.chat.id in SubsChatsIDs):
        if mode == 'on':
           await bot.send_message(message.chat.id, "–ë—Ä–æ, –∑–∞–¥–∞–π —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /topic, –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é /help")
        if mode == 'off':
            user_id = message.from_user.id
            if not (await check_for_admin(SubsChatsIDs[0], user_id) or await check_for_admin(SubsChatsIDs[1], user_id)):
                await send_off_mode_text(message)
            else:
                 await bot.send_message(message.chat.id, "–ö—Ä—É—Ç–æ, —Ç—ã –°—É–ø–µ—Ä–ü–æ–¥–ø–∏—Å—á–∏–∫, –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–º—É, –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç!üòé\n–ñ–¥—É –∫–æ–º–∞–Ω–¥—É /topic")
        
async def try_edit_topic(chat_id, message):
    if await edit_topic(db, message):
        await bot.send_message(chat_id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    else:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")

async def send_off_mode_text(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url=f"{DonateUrl}"))
    keyboard.add(InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=UrlPlatinum))
    await bot.send_message(message.chat.id,f'''–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –ø—Ä–∏—ë–º —Ç–µ–º –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∂–¥–µ–º –≤–∞—à–∏ —Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Å—Ç—Ä–∏–º–µ.
             - —Å –ª—é–±–æ–≤—å—é,Meyson

ü§© –¢–µ–º—ã –≤—Å–µ –µ—â–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∑–∞ –¥–æ–Ω–∞—Ç(–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏) [–∑–¥–µ—Å—å]({DonateUrl})
‚ù§Ô∏è–õ–∏–±–æ –æ—Ñ–æ—Ä–º–∏–≤ –ø–æ–¥–ø–∏—Å–∫—É /subscribe''', parse_mode='Markdown', reply_markup=keyboard)
    await bot.send_sticker(message.chat.id,'CAACAgIAAxkBAAEMZ-JmgY_WuGvpBWdSmJ99nMQgy7qMqQACBxkAAs0xEEghvxdEJ73qJDUE')



print('–ó–∞–ø—É—Å–∫ –¢–ì –±–æ—Ç–∞...')

async def main():
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Quart
    await asyncio.gather(
        app.run_task(port=4000),  # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Quart –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        bot.polling(non_stop=True, skip_pending=True)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    )

if __name__ == '__main__':
    asyncio.run(main())
